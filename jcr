#!/usr/bin/python

"""Compile and run java programs"

MIT License

Copyright (c) 2019 Erazem Kokot <contact at erazem dot eu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import argparse
import os
import subprocess
import sys
from termcolor import colored
from timeit import timeit

# read positional arguments
PARSER = argparse.ArgumentParser()
PARSER.add_argument("filename", metavar="File.java", nargs='?',\
        help="name of java file to compile and test (e.g. File.java)")
PARSER.add_argument("arguments", metavar="testDirectory", nargs='?',\
        help="name of the directory containing test files")
PARSER.add_argument("-v", "--version",\
        help="shows version info", action="store_true")
PARSER.add_argument("-t", "--time",\
        help="display how long each test took", action="store_true")
PARSER.add_argument("-l", "--limit",\
       help="limit the amount of time per test", type=int)
PARSER.add_argument("-p", "--partial",\
        help="specify range of tests to run")
PARSER.add_argument("-e", "--errors",\
        help="show Java errors during testing", action="store_true")

# global variables
ARGS = PARSER.parse_args()
CLASS_NAME = ARGS.filename.split('.')[0]

# require filename if not printing help or version info
if not ARGS.version and ARGS.filename is None:
    PARSER.print_help()
    sys.exit(1)

if ARGS.version:
    print("jcr (java compile and run) 0.9\n\
\n\
Copyright (C) 2019 Erazem Kokot < contact at erazem dot eu > \n\
Licensed under the MIT license. \n\
\n\
This is free software: you are free to change and redistribute it. \n\
THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND.")
    sys.exit(0)

def compile_program():
    """Compiles the java source code"""
    subprocess.run(["javac", ARGS.filename])

def check_if_test():
    """Check if provided args were a test directory or args to pass to Java"""
    if ARGS.arguments is not None:
        return os.path.isdir(ARGS.arguments)
    return None

def run_program():
    """Run a java program with or without arguments"""
    if ARGS.arguments:
        subprocess.run(["java", CLASS_NAME], stdin=str(ARGS.arguments))
    else:
        subprocess.run(["java", CLASS_NAME])

def get_test_files():
    """Add all test files to input and output file arrays"""
    input_files = []
    output_files = []

    if ARGS.partial:
        test_range = parse_range(ARGS.partial)

        #TODO: check if user requested more tests than are available
        for test in os.listdir(ARGS.arguments):
            if test.startswith("vhod") and any(ch in test for ch in test_range):
                input_files.append(test)
            elif test.startswith("izhod") and\
                    any(ch in test for ch in test_range):
                output_files.append(test)
    else:
        for test in os.listdir(ARGS.arguments):
            if test.startswith("vhod"):
                input_files.append(test)
            elif test.startswith("izhod"):
                output_files.append(test)

    # ugly lambda sorting of arrays
    input_files.sort(key=lambda f: int(''.join(filter(str.isdigit, f))))
    output_files.sort(key=lambda f: int(''.join(filter(str.isdigit, f))))

    return input_files, output_files

def parse_range(provided_range):
    """Parses a provided range an returns an array"""
    numbers = []

    for num in provided_range.split(','):
        num = num.strip()

        if num.isdigit():
            numbers.append(num)
        elif '-' in num:
            numbers += range(int(num.split('-')[0]), int(num.split('-')[1]) + 1)

    return numbers


def run_tests(input_files, output_files, errors, time, limit):
    """Run tests on specified files

    Args:
        input_files (arr): Filenames of input files
        output_files (arr): Filenames of output files
        errors (bool): Tells if Java errors should be displayed
        time (bool): Tells if runtimes of tests should be displayed
        limit (int): Amount of time to limit tests with (default: 1s)
    """

    if limit is None:
        limit = 1

    # TODO: implement timing the execution
    # TODO: optionally display expected and received output

    for test_no in range(len(input_files)):
        input_file = open(os.path.join(ARGS.arguments,\
                input_files[test_no]), "r")
        output_file = open(os.path.join(ARGS.arguments,\
                output_files[test_no]), "r")

        process = subprocess.Popen(["java", CLASS_NAME],\
                stdin=input_file,\
                stdout=subprocess.PIPE,\
                stderr=subprocess.PIPE)

        try:
            stdout, stderr = process.communicate(timeout=limit)

            if stdout.decode("utf-8") == output_file.read():
                print("[", colored("✓", "green"), "] Test ", test_no,\
                        " succeded (", input_files[test_no], ", ",\
                        output_files[test_no], ")", sep='')

            else:
                print("[", colored("☓", "red"), "] Test ", test_no,\
                        " failed (", input_files[test_no], ", ",\
                        output_files[test_no], ")", sep='')

                if errors and process.returncode == 0:
                    print("\n", stderr.decode("utf-8"), sep='')

        # If the process takes longer than specified, kill it and report back
        except subprocess.TimeoutExpired:
            process.kill()
            print("[", colored("☓", "red"), "] Test ", test_no,\
                        " failed (", input_files[test_no], ", ",\
                        output_files[test_no], ") - timeout", sep='')

        input_file.close()
        output_file.close()

def cleanup():
    """Remove class files"""
    os.remove(CLASS_NAME + ".class")

def main():
    """Run all the functions"""
    compile_program()

    if check_if_test():
        input_files, output_files = get_test_files()
        run_tests(input_files,
                  output_files,
                  ARGS.errors,
                  ARGS.time,
                  ARGS.limit)
    else:
        run_program()

    cleanup()

if __name__ == "__main__":
    main()
